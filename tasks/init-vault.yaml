---
- name: Start install requirements task as become user
  become: yes
  block:
  - name: Install jmespath library to provide json filtering
    include_role:
      name: install-requirements 
    vars:
      update_packages: false
      python_modules: "{{ vault_install_json_packages }}"
      state: present
  delegate_to: "{{ vault_api_executor }}"

- name: Request a vault init
  ansible.builtin.uri:
    validate_certs: false
    url: "{{ vault_url }}/v1/sys/init"
    method: POST
    status_code: 200
    body_format: json
    body:
      secret_shares: "{{ install_vault_init_secret_shares }}"
      secret_threshold: "{{ install_vault_init_secret_threshold }}"
  register: vault_api_data_init
  run_once: true
  delegate_to: "{{ vault_api_executor }}"

- name: Debug api init information
  ansible.builtin.debug:
    msg: "Init confirmation message from server: {{ vault_api_data_init.json }}"
  run_once: true
  when: debug | bool

- name: "Search unseal key in json string"
  ansible.builtin.set_fact:
    vault_unseal: '{{ vault_api_data_init.json | json_query(query) }}'
  vars:
    query: "keys[0]"
  run_once: true
  when: vault_api_data_init is defined


- name: Save auth information from init to vars
  ansible.builtin.set_fact:
  run_once: true
    vault_token: "{{ vault_api_data_init.json.root_token }}"

- name: Output root token
  ansible.builtin.debug:
  run_once: true
    msg: "Generated root token: {{ vault_api_data_init.json.root_token }}"

- name: Output unseal shamir key(s)
  ansible.builtin.debug:
  run_once: true
    msg: "Generated unseal key(s): {{ vault_unseal }}"

- name: Make initial vault unsealing
  ansible.builtin.uri:
    validate_certs: false
    url: "{{ vault_url }}/v1/sys/unseal"
    method: PUT
    status_code: 200
    body_format: json
    body:
      key: "{{ vault_unseal }}"
      reset: false
      migrate: false
  register: vault_api_data_init
  run_once: true
  delegate_to: "{{ vault_api_executor }}"

- name: Save generated vault configuration
  ansible.builtin.copy:
    content: "{{ lookup('template', './installation_configuration_output.txt.j2') }}"
    dest: "{{ vault_install_save_conf_path }}"
  when: vault_install_save_conf_path is defined
  delegate_to: "{{ vault_api_executor }}"
