---
- name: Load vault server podman-profile
  ansible.builtin.include_vars: "{{lookup('first_found', params)}}"
  vars:
    params:
      files:
        - 'vault-server.yaml'
      paths:
        - 'vars'

- name: Set up ca - Make sure ansible_ca dir exists
  ansible.builtin.file:
    path: "{{ ansible_ca.path }}"
    state: directory

- name: Set up ca - Generate an OpenSSL private key for CA
  community.crypto.openssl_privatekey:
    path: "{{ ansible_ca.path }}/{{ ansible_ca.key }}"
  delegate_to: "{{ groups['member'][0] }}"
  run_once: true
  when: inventory_hostname  == groups['member'][0]

- name: Set up ca - Create certificate signing request (CSR) for CA
  community.crypto.openssl_csr_pipe:
    privatekey_path: "{{ ansible_ca.path }}/{{ ansible_ca.key }}"
    common_name: "{{ ansible_ca.common_name }}"
    organization_name: "{{ ansible_ca.organization_name }}"
    country_name: "{{ ansible_ca.country_name }}"
    basic_constraints:
      - 'CA:TRUE'
    key_usage:
      - keyCertSign
    key_usage_critical: true
  register: ca_csr
  delegate_to: "{{ groups['member'][0] }}"
  run_once: true
  when: inventory_hostname  == groups['member'][0]

- name: Set up ca - Create self-signed CA certificate from CSR
  community.crypto.x509_certificate:
    path: "{{ ansible_ca.path }}/{{ ansible_ca.crt }}"
    csr_content: "{{ ca_csr.csr }}"
    privatekey_path: "{{ ansible_ca.path }}/{{ ansible_ca.key }}"
    provider: selfsigned
  delegate_to: "{{ groups['member'][0] }}"
  run_once: true
  when: inventory_hostname  == groups['member'][0]

- name: Generate cert - Make sure ansible_ca_cert dir exists
  ansible.builtin.file:
    path: "{{ ansible_ca_cert.path }}"
    state: directory

- name: Generate cert - Create private key for new certificate
  community.crypto.openssl_privatekey:
    path: "{{ ansible_ca_cert.path }}/{{ item }}.key"
  delegate_to: "{{ groups['member'][0] }}"
  run_once: true
  with_items: "{{ query('inventory_hostnames', 'member') }}"

- name: Generate cert - Create certificate signing request (CSR) for new certificate
  community.crypto.openssl_csr_pipe:
    privatekey_path: "{{ ansible_ca_cert.path }}/{{ item }}.key"
    subject_alt_name: "{{ ansible_ca_cert.subject_alt_name }}"
  run_once: true
  register: csr
  delegate_to: "{{ groups['member'][0] }}"
  with_items: "{{ query('inventory_hostnames', 'member') }}"

- name: Generate cert - Create certificate signing request (CSR) for new certificate
  community.crypto.openssl_csr:
    path: "{{ ansible_ca_cert.path }}/{{ item }}.csr"
    privatekey_path: "{{ ansible_ca_cert.path }}/{{ item }}.key"
    subject_alt_name: "{{ ansible_ca_cert.subject_alt_name }}"
  run_once: true
  delegate_to: "{{ groups['member'][0] }}"
  with_items: "{{ query('inventory_hostnames', 'member') }}"

- name: Generate cert - Sign certificate with ansible CA
  community.crypto.x509_certificate:
    csr_path : "{{ ansible_ca_cert.path }}/{{ item }}.csr"
    path: "{{ ansible_ca_cert.path }}/{{ item }}.crt"
    provider: ownca
    ownca_path: "{{ ansible_ca.path }}/{{ ansible_ca.crt }}"
    ownca_privatekey_path: "{{ ansible_ca.path }}/{{ ansible_ca.key }}"
    ownca_not_after: "{{ ansible_ca_cert.valid }}"
    ownca_not_before: "-1d"
  run_once: true
  delegate_to: "{{ groups['member'][0] }}"
  with_items: "{{ query('inventory_hostnames', 'member') }}"

- name: Copy cert - Copy ca crt to ansible_ca_cert dest
  ansible.builtin.copy:
    src: "{{ ansible_ca.path }}/{{ ansible_ca.crt }}"
    dest: "{{ ansible_ca_cert.path }}/ca.crt"
    remote_src: yes
  run_once: true
  delegate_to: "{{ groups['member'][0] }}"

- name: Copy cert - Get cert files
  ansible.builtin.find: 
    paths: "{{ ansible_ca_cert.path }}"
    patterns: "*"
  register: ansible_ca_files
  run_once: true
  delegate_to: "{{ groups['member'][0] }}"

- name: Copy cert - Copy certs to localhost
  ansible.builtin.fetch:
    src: "{{ item.path }}"
    dest: /tmp/certificate/
    flat: yes
  run_once: true
  delegate_to: "{{ groups['member'][0] }}"
  with_items: "{{ ansible_ca_files.files }}"

- name: Create PV directory if not exist
  ansible.builtin.file:
    path: "/podman/pv/{{ container_name }}/certificate/"
    state: directory

- name: Copy file with owner and permissions
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: '/tmp/certificate/{{ inventory_hostname }}.key', dest: '/podman/pv/{{ container_name }}/certificate/' }
    - { src: '/tmp/certificate/{{ inventory_hostname }}.crt', dest: '/podman/pv/{{ container_name }}/certificate/' }
    - { src: '/tmp/certificate/{{ ansible_ca.crt }}', dest: '/podman/pv/{{ container_name }}/certificate/' }